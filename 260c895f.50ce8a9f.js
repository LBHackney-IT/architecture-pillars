(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{74:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return p}));var r=a(3),n=a(7),o=(a(0),a(94)),i=["components"],c={id:"preferred_data_source",title:"Preferred types of databases and when to use"},s={unversionedId:"preferred_data_source",id:"preferred_data_source",isDocsHomePage:!1,title:"Preferred types of databases and when to use",description:"Creating a new database",source:"@site/docs/preferred_data_source.md",slug:"/preferred_data_source",permalink:"/architecture-pillars/preferred_data_source",editUrl:"https://github.com/LBHackney-IT/architecture-pillars/edit/master/docs/preferred_data_source.md",version:"current",sidebar:"docs",previous:{title:"Production Deployment",permalink:"/architecture-pillars/production_deployment"},next:{title:"Core AWS resources compliance checks",permalink:"/architecture-pillars/core_resource_compliance"}},l=[{value:"Creating a new database",id:"creating-a-new-database",children:[]},{value:"Choosing the right type of database technology",id:"choosing-the-right-type-of-database-technology",children:[]},{value:"Preferred database technology",id:"preferred-database-technology",children:[]}],b={toc:l};function p(e){var t=e.components,a=Object(n.a)(e,i);return Object(o.b)("wrapper",Object(r.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"creating-a-new-database"},"Creating a new database"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Before creating a new database"),", please consult one of the Senior Engineers and/or confirm at the Data meetup if this type of data is stored elsewhere already."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Data might already exist and can be reused as per our approaches."),Object(o.b)("li",{parentName:"ul"},"Existing data entities could potentially be re-iterated and expanded to include additional data properties, instead of creating a new data source making it less restrictive for reusability. "),Object(o.b)("li",{parentName:"ul"},"Check our ",Object(o.b)("a",{parentName:"li",href:"https://app.swaggerhub.com/organizations/Hackney"},"SwaggerHub page")," and ",Object(o.b)("a",{parentName:"li",href:"https://developer-api.hackney.gov.uk/"},"Developer Hub"),", which lists all of our APIs.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"If a new data store is required:")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Perform an evaluation if SQL or NoSQL is more suitable for your project\u2019s needs.",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#choosing-the-right-type-of-database-technology"},"Guidance provided further down in this document.")))),Object(o.b)("li",{parentName:"ul"},"Design the API that will interact with the data and present it at the Data Meetup as per our ",Object(o.b)("a",{parentName:"li",href:"https://playbook.hackney.gov.uk/api-specifications/assessment_process/"},"API specifications assessment process.")," "),Object(o.b)("li",{parentName:"ul"},"Use Terraform to provision the new database resource in AWS. ",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Use one of the ",Object(o.b)("a",{parentName:"li",href:"https://github.com/LBHackney-IT/aws-hackney-common-terraform"},"Terraform common repository")," templates (if applicable)")))),Object(o.b)("h3",{id:"choosing-the-right-type-of-database-technology"},"Choosing the right type of database technology"),Object(o.b)("p",null,"Assuming knowledge of the main differences between a SQL and a NoSQL database, those are some of the questions which will help us to choose the right type of database for our domain/service when the choice is not obvious:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"1. Do we have a lot of updates and very frequent updates per second?")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Yes: PostgreSQL")," - A NoSQL DB is probably not the best solution because updates are more expensive than the reads, as we have to read and write a document."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"No: DynamoDB"),".")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"2. Is our data highly structured and predictable?")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Yes: PostgreSQL")," - RDBMS are used when we know in advance the structure of the data and it does not change often (rigid structures) and/or is not in active agile development."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"No: DynamoDB")," - When our data structure changes and there is a need to have flexibility, NoSQL is a good choice, especially for continuously evolving data entities as part of agile development.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"3. Do we need to support a lot of queries on different entity\u2019s properties (",Object(o.b)("em",{parentName:"strong"},"this question excludes search functionalities"),")?")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Yes: PostgreSQL")," -  Queries on properties different  than Id and PartitionKey are anti-pattern for scaling out and so not suitable for NoSQL DB, those queries should be executed occasionally. "),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"No: DynamoDB")," ")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"4. Do we need low latency/sub-second data access? (this question excludes search functionalities)?")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Yes: DynamoDB")," - When there is a need for low latency data access, NoSQL tends to be really fast and in the order of ~10ms"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"No: PostgreSQL"))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"5. Do we need to be able to scale in the future?")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Yes: DynamoDB")," - NoSQL databases are horizontally scalable."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"No: PostgreSQL")," - RDBMS are not horizontally scalable, they can be scaled only vertically.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"6. Is high availability important and can eventual consistency be tolerated?")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"Yes: DynamoDB")," - Provides better availability than a SQL database, but we have eventual consistency."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"No: PostgreSQL")," - Provides strong consistency but availability is not as good as a NoSQL database with multiple independent nodes.")),Object(o.b)("p",null,"If the above information is not sufficient to make a choice, please raise this as a question during one of the weekly Data meetups."),Object(o.b)("h3",{id:"preferred-database-technology"},"Preferred database technology"),Object(o.b)("p",null,"For NoSQL data sources, our preference is to use ",Object(o.b)("strong",{parentName:"p"},"DynamoDB")," as the database technology."),Object(o.b)("p",null,"For SQL, relational databases, our preference is to use ",Object(o.b)("strong",{parentName:"p"},"RDS PostgreSQL")," as the database technology."))}p.isMDXComponent=!0},94:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var r=a(0),n=a.n(r);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=n.a.createContext({}),b=function(e){var t=n.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=b(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(a),d=r,m=p["".concat(i,".").concat(d)]||p[d]||u[d]||o;return a?n.a.createElement(m,c(c({ref:t},l),{},{components:a})):n.a.createElement(m,c({ref:t},l))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);